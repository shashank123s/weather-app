{"version":3,"file":"static/js/420.6c2492b1.chunk.js","mappings":"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","sources":["components/helpers/SnackbarController.tsx","components/helpers/SnackbarControllerSuccess.tsx","services/httpService.ts","models/model.ts","pages/addcity/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Alert, Snackbar} from '@mui/material';\nimport {AlertColor} from '@mui/material/Alert/Alert';\n\ninterface props {\n    severity?: AlertColor;\n    message?: string;\n}\n\nfunction SnackbarController({severity = \"error\", message = \"\"}: props) {\n    const [_open, _setOpen]       = useState(false);\n    const [_message, _setMessage] = useState('');\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        _setMessage('');\n        _setOpen(false);\n    };\n\n    useEffect(() => {\n        _setMessage(message);\n        _setOpen(message !== '');\n    }, [message]);\n\n    return (\n        <Snackbar open={_open} onClose={handleClose} anchorOrigin={{horizontal: \"center\", vertical: \"bottom\"}} autoHideDuration={3000} sx={{minWidth: '25rem'}}>\n            <Alert onClose={handleClose} severity={severity} variant={\"filled\"} sx={{width: '100%'}}>\n                {_message}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nexport default SnackbarController;","import React, {useEffect, useState} from 'react';\nimport {Alert, Snackbar} from '@mui/material';\nimport {AlertColor} from '@mui/material/Alert/Alert';\n\ninterface props {\n    severity?: AlertColor;\n    message?: string;\n}\n\nfunction SnackbarControllerSuccess({severity = \"success\", message = \"\"}: props) {\n    const [_open, _setOpen]       = useState(false);\n    const [_message, _setMessage] = useState('');\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        _setMessage('');\n        _setOpen(false);\n    };\n\n    useEffect(() => {\n        _setMessage(message);\n        _setOpen(message !== '');\n    }, [message]);\n\n    return (\n        <Snackbar open={_open} onClose={handleClose} anchorOrigin={{horizontal: \"center\", vertical: \"bottom\"}} autoHideDuration={3000} sx={{minWidth: '25rem'}}>\n            <Alert onClose={handleClose} severity={severity} variant={\"filled\"} sx={{width: '100%'}}>\n                {_message}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nexport default SnackbarControllerSuccess;","import axios from 'axios';\nimport {authService} from './authService';\n\nconst getToken = () => {\n    const user = authService.user();\n    if (user) {\n        return user?.accessToken || '';\n    }\n\n    return '';\n}\n\nexport const httpRequest = axios.create({\n    headers: {\n        Authorization: 'Bearer ' + getToken()\n    }\n});\n","import * as React from \"react\";\nimport {httpRequest} from \"../services/httpService\";\nimport {paths} from \"../configs/constants\";\nexport interface PropRoute {\n    path: string;\n    element?: React.ReactNode | null;\n}\n\nexport const getAccountsLogin = (formData: any) => {\n    const data = {\n        email: formData?.keyUser,\n        password: formData?.keyPassword\n    }\n    return httpRequest.post(paths.api.accounts.login, data);\n};\n\n\nexport const getUserList = (formData: any) => {\n    const url = `${paths.api.accounts.joinMeList}`; \n    return httpRequest.get(url);\n}\n\nexport const getSaveCityList = (formData: any) => {\n    const url = `${paths.api.accounts.insightList}`;\n    return httpRequest.get(url);\n}\n\n\nexport const addCity = (data: any) => {\n    return httpRequest.post(paths.api.accounts.addCity, data);\n}\n\n\n\n\n\n\n\n","import { LoadingButton } from '@mui/lab';\nimport { TextField } from '@mui/material';\nimport React, { useState } from 'react'\nimport SnackbarController from '../../components/helpers/SnackbarController';\nimport SnackbarControllerSuccess from '../../components/helpers/SnackbarControllerSuccess';\nimport { addCity } from '../../models/model';\n\nexport default function Index() {\n\n    const [name, setName] = useState('')\n    const [weather, setWeather] = useState('')\n    const [_snackMessage, _setSnackMessage] = useState('');\n    const [_snackMessageSuccess, _setSnackMessageSuccess] = useState('');\n     const [_createLoading, _setCreateLoading] = useState(false);\n\n\n     const validate = {\n        name: { error: false, message: '' },\n        weather: { error: false, message: '' },\n      };\n    \n      const [_formValidate, _setFormValidate] = useState(validate);\n\n    const handlePost = (e: any) => {\n        e.preventDefault();\n        _setCreateLoading(true);\n        const _validate: any = Object.assign({}, validate);\n        let valid: boolean = true;\n        if (!name) {\n            _validate.name.error = true;\n            _validate.name.message = \"Required Field\";\n            valid = false;\n        }\n        if (!weather) {\n            _validate.weather.error = true;\n            _validate.weather.message = \"Required Field\";\n            valid = false;\n        }\n    \n        if (!valid) {\n          _setCreateLoading(false);\n          _setFormValidate(_validate);\n          return;\n        }\n\n\n        const obj = {\n            name: name,\n            weather: weather\n        }\n\n        addCity(obj).then(response => response.data).then(data => {\n          try {\n              _setSnackMessageSuccess(data.status);\n          } catch (error) {\n          }\n      }).catch(error => {\n          if (error.response.data?.status === 'error') {\n            console.log(error)\n          } else {\n              _setSnackMessage(\"Something Went Wrong Please try again\");\n          }\n      }).finally(() => { _setCreateLoading(false); })\n    _setFormValidate(_validate);\n    _setSnackMessage('');\n    _setSnackMessageSuccess('');\n    }\n\n    return (\n        <>\n            <h2>Add City</h2>\n            <form className='mt-5' onSubmit={e => handlePost(e)} noValidate>\n                <div className='my-4'>\n                    <TextField variant='outlined'  className='bg-white' label=\"City Name\" value={name} onChange={(e) => setName(e.target.value)} \n                    error={_formValidate.name.error} helperText={_formValidate.name.message}/>\n                </div>\n                <div className='my-4'>\n                    <TextField variant='outlined'  className='bg-white' label=\"Temp\" value={weather} onChange={(e) => setWeather(e.target.value)} \n                    error={_formValidate.weather.error} helperText={_formValidate.weather.message}/>\n                </div>\n                    <LoadingButton endIcon={<></>} variant=\"contained\" type=\"submit\" loadingPosition=\"end\" loading={_createLoading} size=\"large\">Add City</LoadingButton>\n            </form>\n            <SnackbarController message={_snackMessage} />\n            <SnackbarControllerSuccess message={_snackMessageSuccess} />\n        </>\n    )\n}\n"],"names":["severity","message","useState","_open","_setOpen","_message","_setMessage","handleClose","event","reason","useEffect","open","onClose","anchorOrigin","horizontal","vertical","autoHideDuration","sx","minWidth","variant","width","httpRequest","axios","headers","Authorization","user","authService","accessToken","getToken","getAccountsLogin","formData","data","email","keyUser","password","keyPassword","post","paths","getUserList","url","get","getSaveCityList","addCity","Index","name","setName","weather","setWeather","_snackMessage","_setSnackMessage","_snackMessageSuccess","_setSnackMessageSuccess","_createLoading","_setCreateLoading","validate","error","_formValidate","_setFormValidate","className","onSubmit","e","preventDefault","_validate","Object","assign","valid","obj","then","response","status","catch","console","log","finally","handlePost","noValidate","label","value","onChange","target","helperText","endIcon","type","loadingPosition","loading","size"],"sourceRoot":""}