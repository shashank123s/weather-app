{"version":3,"file":"static/js/524.84d89c60.chunk.js","mappings":"gQAYaA,EAAcC,IAAAA,OAAa,CACpCC,QAAS,CACLC,cAAe,UAXN,WACb,IAAMC,EAAOC,EAAAA,EAAAA,OACb,OAAID,IACW,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAME,cAGV,EACV,CAIkCC,M,UCNtBC,EAAmB,SAACC,GAC7B,IAAMC,EAAO,CACTC,MAAK,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAUG,QACjBC,SAAQ,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAUK,aAExB,OAAOd,EAAYe,KAAKC,EAAAA,EAAAA,IAAAA,SAAAA,MAA0BN,EACrD,EAGYO,EAAc,SAACR,GACxB,IAAMS,EAAG,UAAMF,EAAAA,EAAAA,IAAAA,SAAAA,YACf,OAAOhB,EAAYmB,IAAID,EAC1B,EAEYE,EAAkB,SAACX,GAC5B,IAAMS,EAAG,UAAMF,EAAAA,EAAAA,IAAAA,SAAAA,aACf,OAAOhB,EAAYmB,IAAID,EAC1B,EAGYG,EAAU,SAACX,GACpB,OAAOV,EAAYe,KAAKC,EAAAA,EAAAA,IAAAA,SAAAA,QAA4BN,EACvD,C,8GC2DD,UApFA,WAAkB,IAAD,EAIf,GAAwBY,EAAAA,EAAAA,UAAc,IAAtC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,WAAc,GAAtC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAwBJ,EAAAA,EAAAA,UAAc,CAAC,GAAvC,eAAOZ,EAAP,KAAaiB,EAAb,KAYMC,EAAmB,SAACC,GACxB,IAAIJ,EAAJ,CACA,IAAMK,EAAS,qDAAuDD,EAAvD,0CACf5B,IAAAA,IAAU6B,GAAQC,MAAK,SAACC,GACtBC,QAAQC,IAAI,WAAYF,EAAItB,MAC5BiB,EAAQK,EAAItB,KACb,IAAEyB,OAAM,SAACC,GACRH,QAAQC,IAAI,MAAOE,EACpB,GAPe,CAQjB,EAsBD,OAnBAC,EAAAA,EAAAA,YAAU,YACRjB,EAAAA,EAAAA,IAAgB,IACbW,MAAK,SAAAO,GAAQ,OAAIA,EAAS5B,IAAb,IACbqB,MAAK,SAAArB,GACJ,IACEuB,QAAQC,IAAIxB,GACZc,GAAQ,OAAId,EAAKA,MAIlB,CAFC,MAAO6B,GACPN,QAAQC,IAAIK,EACb,CACF,IACAJ,OAAM,SAAAI,GACLN,QAAQC,IAAIK,EAEb,GAEJ,GAAE,KAGD,iBAAKC,UAAU,oCAAf,WACE,oCACGf,IACH,iBAAKe,UAAU,yEAAf,WACM,0BACE,gBAAKA,UAAU,cACbC,IAAKC,EAASC,MAAO,CAAEC,MAAO,cAEhC,eAAIJ,UAAU,OAAd,gBACG9B,QADH,IACGA,OADH,EACGA,EAAMmC,QAET,gBAAIL,UAAU,OAAd,YAAuB,OAAC9B,QAAD,IAACA,GAAD,UAACA,EAAMoC,YAAP,aAAC,EAAYC,MAAQ,QAAQC,QAAQ,GAA5D,YACF,gBAAKR,UAAU,OAAf,UACE,mBAAQA,UAAU,kBAAkBS,QAtD5B,kBAAMvB,GAAQ,EAAd,EAsDR,wBAMPH,EAAK2B,KAAI,SAACC,EAAWC,GAEpB,OACE,iBAAKZ,UAAU,iEAAf,WACE,gBAAKA,UAAU,0BAAf,SAA0CW,EAAKN,QAC/C,gBAAKL,UAAU,WAAf,UACE,mBAAQA,UAAU,kBAAkBS,QAAS,kBAhEtC,SAACE,EAAWC,GAC7B1B,GAAQ,GACRO,QAAQC,IAAIiB,EAAKN,MACjBjB,EAAiBuB,EAAKN,KACvB,CA4D8DQ,CAAWF,EAAjB,EAA7C,qCAHiFC,EAOxF,MAGN,C","sources":["services/httpService.ts","models/model.ts","pages/myCity/index.tsx"],"sourcesContent":["import axios from 'axios';\nimport {authService} from './authService';\n\nconst getToken = () => {\n    const user = authService.user();\n    if (user) {\n        return user?.accessToken || '';\n    }\n\n    return '';\n}\n\nexport const httpRequest = axios.create({\n    headers: {\n        Authorization: 'Bearer ' + getToken()\n    }\n});\n","import * as React from \"react\";\nimport {httpRequest} from \"../services/httpService\";\nimport {paths} from \"../configs/constants\";\nexport interface PropRoute {\n    path: string;\n    element?: React.ReactNode | null;\n}\n\nexport const getAccountsLogin = (formData: any) => {\n    const data = {\n        email: formData?.keyUser,\n        password: formData?.keyPassword\n    }\n    return httpRequest.post(paths.api.accounts.login, data);\n};\n\n\nexport const getUserList = (formData: any) => {\n    const url = `${paths.api.accounts.joinMeList}`; \n    return httpRequest.get(url);\n}\n\nexport const getSaveCityList = (formData: any) => {\n    const url = `${paths.api.accounts.insightList}`;\n    return httpRequest.get(url);\n}\n\n\nexport const addCity = (data: any) => {\n    return httpRequest.post(paths.api.accounts.addCity, data);\n}\n\n\n\n\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport { getSaveCityList } from '../../models/model';\nimport axios from \"axios\";\nimport weather from '../../assets/images/myweather.png'\n\nfunction Index() {\n\n  const apiKey = \"f56f24967aaf51182d1d4df628297c6d\"\n\n  const [city, setCity] = useState<any>([]);\n  const [show, setShow] = useState<any>(false);\n  const [data, setData] = useState<any>({})\n\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = (item: any, i: number) => {\n    setShow(true);\n    console.log(item.name)\n    getWetherDetails(item.name)\n  };\n\n\n  const getWetherDetails = (cityName: any) => {\n    if (show) return\n    const apiURL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + cityName + \"&appid=\" + apiKey\n    axios.get(apiURL).then((res) => {\n      console.log(\"response\", res.data)\n      setData(res.data)\n    }).catch((err) => {\n      console.log(\"err\", err)\n    })\n  }\n\n\n  useEffect(() => {\n    getSaveCityList([])\n      .then(response => response.data)\n      .then(data => {\n        try {\n          console.log(data)\n          setCity([...data.data]);\n          // console.log(data.city.name)\n        } catch (error) {\n          console.log(error)\n        }\n      })\n      .catch(error => {\n        console.log(error)\n        // _setSnackMessage(\"Something Went Wrong Please try again\");\n      })\n    // _setSnackMessage(\"\");\n  }, [])\n\n  return (\n    <div className='fullcl row justify-content-center'>\n      <h2>My City</h2>\n        {show && \n      <div className='wetherResultBox col-md-8 shadow rounded bg-white text-center py-5 my-5'>\n            <div>\n              <img className=\"weathorIcon\"\n                src={weather} style={{ width: \"10rem\" }} />\n            </div>\n              <h5 className=\"my-3\">\n                {data?.name}\n              </h5>\n              <h6 className=\"my-3\">{((data?.main?.temp) - 273.15).toFixed(2)}Â°C</h6>\n            <div className=\"my-3\">\n              <button className='btn btn-primary' onClick={handleClose}>\n                Close\n              </button>\n            </div>\n      </div>}\n\n      {city.map((item: any, i: number) => {\n        // console.log(city.name)\n        return (\n          <div className='row mt-5 justify-content-center align-items-center border mx-5' key={i}>\n            <div className='col-md-4 my-3 py-2 fs-4'>{item.name}</div>\n            <div className='col-md-4'>\n              <button className='btn btn-primary' onClick={() => handleShow(item, i)}>Weather Information</button>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Index;"],"names":["httpRequest","axios","headers","Authorization","user","authService","accessToken","getToken","getAccountsLogin","formData","data","email","keyUser","password","keyPassword","post","paths","getUserList","url","get","getSaveCityList","addCity","useState","city","setCity","show","setShow","setData","getWetherDetails","cityName","apiURL","then","res","console","log","catch","err","useEffect","response","error","className","src","weather","style","width","name","main","temp","toFixed","onClick","map","item","i","handleShow"],"sourceRoot":""}