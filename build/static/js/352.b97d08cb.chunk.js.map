{"version":3,"file":"static/js/352.b97d08cb.chunk.js","mappings":"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","sources":["components/helpers/SnackbarController.tsx","components/helpers/SnackbarControllerSuccess.tsx","services/httpService.ts","models/model.ts","pages/userList/index.tsx","../node_modules/@mui/utils/esm/ownerDocument.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Alert, Snackbar} from '@mui/material';\nimport {AlertColor} from '@mui/material/Alert/Alert';\n\ninterface props {\n    severity?: AlertColor;\n    message?: string;\n}\n\nfunction SnackbarController({severity = \"error\", message = \"\"}: props) {\n    const [_open, _setOpen]       = useState(false);\n    const [_message, _setMessage] = useState('');\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        _setMessage('');\n        _setOpen(false);\n    };\n\n    useEffect(() => {\n        _setMessage(message);\n        _setOpen(message !== '');\n    }, [message]);\n\n    return (\n        <Snackbar open={_open} onClose={handleClose} anchorOrigin={{horizontal: \"center\", vertical: \"bottom\"}} autoHideDuration={3000} sx={{minWidth: '25rem'}}>\n            <Alert onClose={handleClose} severity={severity} variant={\"filled\"} sx={{width: '100%'}}>\n                {_message}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nexport default SnackbarController;","import React, {useEffect, useState} from 'react';\nimport {Alert, Snackbar} from '@mui/material';\nimport {AlertColor} from '@mui/material/Alert/Alert';\n\ninterface props {\n    severity?: AlertColor;\n    message?: string;\n}\n\nfunction SnackbarControllerSuccess({severity = \"success\", message = \"\"}: props) {\n    const [_open, _setOpen]       = useState(false);\n    const [_message, _setMessage] = useState('');\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        _setMessage('');\n        _setOpen(false);\n    };\n\n    useEffect(() => {\n        _setMessage(message);\n        _setOpen(message !== '');\n    }, [message]);\n\n    return (\n        <Snackbar open={_open} onClose={handleClose} anchorOrigin={{horizontal: \"center\", vertical: \"bottom\"}} autoHideDuration={3000} sx={{minWidth: '25rem'}}>\n            <Alert onClose={handleClose} severity={severity} variant={\"filled\"} sx={{width: '100%'}}>\n                {_message}\n            </Alert>\n        </Snackbar>\n    );\n}\n\nexport default SnackbarControllerSuccess;","import axios from 'axios';\nimport {authService} from './authService';\n\nconst getToken = () => {\n    const user = authService.user();\n    if (user) {\n        return user?.accessToken || '';\n    }\n\n    return '';\n}\n\nexport const httpRequest = axios.create({\n    headers: {\n        Authorization: 'Bearer ' + getToken()\n    }\n});\n","import * as React from \"react\";\nimport {httpRequest} from \"../services/httpService\";\nimport {paths} from \"../configs/constants\";\nexport interface PropRoute {\n    path: string;\n    element?: React.ReactNode | null;\n}\n\nexport const getAccountsLogin = (formData: any) => {\n    const data = {\n        email: formData?.keyUser,\n        password: formData?.keyPassword\n    }\n    return httpRequest.post(paths.api.accounts.login, data);\n};\n\n\nexport const getUserList = (formData: any) => {\n    const url = `${paths.api.accounts.joinMeList}`; \n    return httpRequest.get(url);\n}\n\nexport const getSaveCityList = (formData: any) => {\n    const url = `${paths.api.accounts.insightList}`;\n    return httpRequest.get(url);\n}\n\n\nexport const addCity = (data: any) => {\n    return httpRequest.post(paths.api.accounts.addCity, data);\n}\n\n\n\n\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport SnackbarController from '../../components/helpers/SnackbarController';\nimport SnackbarControllerSuccess from '../../components/helpers/SnackbarControllerSuccess';\nimport { getUserList } from '../../models/model';\n\nfunction Index() {\n  const [_snackMessage, _setSnackMessage] = useState('');\n  const [_snackMessageSuccess, _setSnackMessageSuccess] = useState('');\n  const [mydata, setMydata] = useState<any>([]);\n\n  useEffect(() => {\n    getUserList({})\n      .then(response => response.data)\n      .then(data => {\n        try {\n          console.log(data)\n          setMydata([...data.data]);\n          _setSnackMessageSuccess(\"success\")\n        } catch (error) {\n          console.log(error)\n        }\n      })\n      .catch(error => {\n        console.log(error)\n        _setSnackMessage(\"Something Went Wrong Please try again\");\n      })\n    _setSnackMessage(\"\");\n  }, [])\n\n\n  return (<>\n    <SnackbarController message={_snackMessage} />\n    <SnackbarControllerSuccess message={_snackMessageSuccess} />\n    <h2>All User List</h2>\n    <div className='my-3'>\n    {mydata.map((item: any, i: number) => {\n      return (\n        <ul key={i}>\n          <li>{item.name}</li>\n        </ul>\n      )\n    })}\n    </div>\n  </>)\n}\n\nexport default Index;","export default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}"],"names":["severity","message","useState","_open","_setOpen","_message","_setMessage","handleClose","event","reason","useEffect","open","onClose","anchorOrigin","horizontal","vertical","autoHideDuration","sx","minWidth","variant","width","httpRequest","axios","headers","Authorization","user","authService","accessToken","getToken","getAccountsLogin","formData","data","email","keyUser","password","keyPassword","post","paths","getUserList","url","get","getSaveCityList","addCity","_snackMessage","_setSnackMessage","_snackMessageSuccess","_setSnackMessageSuccess","mydata","setMydata","then","response","console","log","error","catch","className","map","item","i","name","ownerDocument","node","document"],"sourceRoot":""}